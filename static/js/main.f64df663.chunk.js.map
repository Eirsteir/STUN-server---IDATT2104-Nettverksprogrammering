{"version":3,"sources":["components/CreateRoom.js","components/Messages.js","components/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","useState","joinID","setID","showJoinForm","setShowJoinForm","showButtons","setShowButtons","create","id","uuid","history","push","join","handleChange","e","target","value","Buttons","className","onClick","showJoin","JoinForm","type","hideJoin","placeholder","onChange","Messages","messages","map","message","index","yours","Room","peerRef","useRef","socketRef","otherUser","sendChannel","text","setText","setMessages","handleReceiveMessage","data","createPeer","userID","peer","RTCPeerConnection","iceServers","urls","onicecandidate","handleICECandidateEvent","onnegotiationneeded","current","createOffer","then","offer","setLocalDescription","payload","caller","sdp","localDescription","emit","catch","console","log","handleNegotiationNeededEvent","handleOffer","incoming","ondatachannel","event","channel","onmessage","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","handleAnswer","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","sendMessage","send","useEffect","io","connect","match","params","roomID","on","createDataChannel","callUser","onKeyDown","key","App","basename","process","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f64df663.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { v1 as uuid } from \"uuid\";\r\nimport '../styles/CreateRoom.css';\r\n\r\n\r\nconst CreateRoom = (props) => {\r\n\r\n    const [joinID, setID] = useState(\"\");\r\n    const [showJoinForm, setShowJoinForm] = useState(false);\r\n    const [showButtons, setShowButtons] = useState(true);\r\n\r\n    function create() {\r\n        const id = uuid();\r\n        props.history.push(`/room/${id}`);\r\n    }\r\n    \r\n    function join() {\r\n        props.history.push(`/room/${joinID}`);\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setID(e.target.value);\r\n    }\r\n\r\n    const Buttons = () => (\r\n        <div className=\"buttons\">\r\n            <button className=\"create-btn\" id=\"b1\" onClick={create}>Create Room</button>\r\n            <button className=\"create-btn\" onClick={showJoin}>Join Room</button>\r\n        </div>\r\n    )\r\n\r\n    const JoinForm = () => (\r\n        <div id=\"join-form\">\r\n            <button type=\"text\" className=\"join-btn\" onClick={hideJoin}>X</button>\r\n            <input type=\"text\" className=\"join-text\" placeholder=\"Input chat ID here\" value={joinID} onChange={handleChange}></input>\r\n            <button className=\"join-btn\" onClick={join}>Join</button>\r\n        </div>\r\n    )\r\n\r\n    const showJoin = () => {\r\n        setShowJoinForm(true);\r\n        setShowButtons(false);\r\n    }\r\n\r\n    const hideJoin = () => {\r\n        setShowButtons(true);\r\n        setShowJoinForm(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"btn-page\">\r\n            <div className=\"btn-container\">\r\n            { showButtons ? <Buttons/> : null }\r\n            { showJoinForm ? <JoinForm/> : null }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateRoom;","import React from \"react\";\r\nimport '../styles/Messages.css';\r\n\r\n\r\nconst Messages = (props) => {\r\n    const { messages } = props;\r\n    \r\n    const renderMessage = (message, index) => {\r\n        if (message.yours) {\r\n            return (\r\n                <div className=\"my_message_container\" key={index}>\r\n                    <div className=\"my_message\">\r\n                        {message.value}\r\n                    </div>\r\n                    {/*<div id=\"usr-s\">Username</div>*/}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"received_message_container\" key={index}>\r\n                <div className=\"received_message\">\r\n                    {message.value}\r\n                </div>\r\n                <div id=\"usr-r\">Username</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"messages_container\">\r\n            {messages.map(renderMessage)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages;","import React, { useRef, useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Messages from '../components/Messages';\r\nimport '../styles/Room.css'\r\n\r\nconst Room = (props) => {\r\n    const peerRef = useRef();\r\n    const socketRef = useRef();\r\n    const otherUser = useRef();\r\n    const sendChannel = useRef();\r\n    const [text, setText] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io.connect(\"https://signaling-server-nettprogg.herokuapp.com/\");\r\n        socketRef.current.emit(\"join room\", props.match.params.roomID);\r\n\r\n        socketRef.current.on('other user', userID => {\r\n            callUser(userID);\r\n            otherUser.current = userID;\r\n        });\r\n\r\n        socketRef.current.on(\"user joined\", userID => {\r\n            otherUser.current = userID;\r\n        });\r\n\r\n        socketRef.current.on(\"offer\", handleOffer);\r\n\r\n        socketRef.current.on(\"answer\", handleAnswer);\r\n\r\n        socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\r\n\r\n    }, []);\r\n\r\n\r\n    function callUser(userID) {\r\n        peerRef.current = createPeer(userID);\r\n        sendChannel.current = peerRef.current.createDataChannel(\"sendChannel\");\r\n        sendChannel.current.onmessage = handleReceiveMessage;\r\n    }\r\n\r\n    function handleReceiveMessage(e) {\r\n        setMessages(messages => [...messages, {yours: false, value: e.data}]);\r\n    }\r\n\r\n    function createPeer(userID) {\r\n        const peer = new RTCPeerConnection({\r\n            iceServers: [\r\n                {\r\n                    urls: 'stun:nettverksprogg.eastus2.cloudapp.azure.com:3478'\r\n                }\r\n            ]\r\n        });\r\n\r\n        peer.onicecandidate = handleICECandidateEvent;\r\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n\r\n        return peer;\r\n    }\r\n\r\n    function handleNegotiationNeededEvent(userID) {\r\n        peerRef.current.createOffer().then(offer => {\r\n            return peerRef.current.setLocalDescription(offer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: userID,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            };\r\n            socketRef.current.emit(\"offer\", payload);\r\n        }).catch(e => console.log(e));\r\n    }\r\n\r\n    function handleOffer(incoming) {\r\n        peerRef.current = createPeer();\r\n        peerRef.current.ondatachannel = event => {\r\n            sendChannel.current = event.channel;\r\n            sendChannel.current.onmessage = handleReceiveMessage;\r\n        }\r\n        const desc = new RTCSessionDescription(incoming.sdp);\r\n        \r\n        peerRef.current.setRemoteDescription(desc).then(() => {\r\n        }).then(() => {\r\n            return peerRef.current.createAnswer();\r\n        }).then(answer => {\r\n            return peerRef.current.setLocalDescription(answer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: incoming.caller,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            }\r\n            socketRef.current.emit(\"answer\", payload);\r\n        })\r\n    }\r\n\r\n    function handleAnswer(message) {\r\n        const desc = new RTCSessionDescription(message.sdp);\r\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\r\n    }\r\n\r\n    function handleICECandidateEvent(e) {\r\n        if (e.candidate) {\r\n            const payload = {\r\n                target: otherUser.current,\r\n                candidate: e.candidate,\r\n            }\r\n            socketRef.current.emit(\"ice-candidate\", payload);\r\n        }\r\n    }\r\n\r\n    function handleNewICECandidateMsg(incoming) {\r\n        const candidate = new RTCIceCandidate(incoming);\r\n\r\n        peerRef.current.addIceCandidate(candidate)\r\n            .catch(e => console.log(e));\r\n    }\r\n\r\n    function sendMessage() {\r\n        sendChannel.current.send(text);\r\n        setMessages(messages => [...messages, {yours: true, value: text}]);\r\n        setText(\"\");\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const handleKeyDown = (event) => { // TODO: Add ability for Shift+Enter to go to next line\r\n        if (event.key === 'Enter') {\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Chat ID: {props.match.params.roomID}</h1>\r\n            <div className=\"username\">\r\n                <input id=\"name\" type=\"text\" placeholder=\"Username\"></input>\r\n                <button id=\"name-btn\">Submit</button>\r\n            </div>\r\n            <Messages messages={messages} />\r\n            <div className=\"send-msg\">\r\n                <textarea className=\"msg-box\" value={text} onChange={handleChange} onKeyDown={handleKeyDown} placeholder=\"Write your message here...\" />\r\n                <button className=\"btn\" onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport CreateRoom from \"./components/CreateRoom\";\r\nimport Room from \"./components/Room\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={CreateRoom} />\r\n          <Route path=\"/room/:roomID\" component={Room} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}