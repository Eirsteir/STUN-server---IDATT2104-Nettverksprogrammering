{"version":3,"sources":["components/CreateRoom.js","components/Messages.js","components/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","useState","joinID","setID","className","onClick","id","uuid","history","push","type","placeholder","value","onChange","e","target","Messages","messages","map","message","index","yours","key","Room","peerRef","useRef","socketRef","otherUser","sendChannel","text","setText","setMessages","handleReceiveMessage","data","createPeer","userID","peer","RTCPeerConnection","iceServers","urls","onicecandidate","handleICECandidateEvent","onnegotiationneeded","current","createOffer","then","offer","setLocalDescription","payload","caller","sdp","localDescription","emit","catch","console","log","handleNegotiationNeededEvent","handleOffer","incoming","ondatachannel","event","channel","onmessage","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","handleAnswer","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","sendMessage","send","useEffect","io","connect","match","params","roomID","on","createDataChannel","callUser","onKeyDown","App","basename","process","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.fe67bff6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { v1 as uuid } from \"uuid\";\nimport '../styles/CreateRoom.css';\n\n\nconst CreateRoom = (props) => {\n\n    const [joinID, setID] = useState(\"\");\n\n\n\n    function create() {\n        const id = uuid();\n        props.history.push(`/room/${id}`);\n    }\n    \n    function join() {\n        props.history.push(`/room/${joinID}`);\n    }\n\n    function handleChange(e) {\n        setID(e.target.value);\n    }\n\n\n    \n\n    return (\n        <div className=\"btn-page\">\n            <div className=\"btn-container\">\n            <button className=\"create-btn\" onClick={create}>Create Room</button>\n            <input type=\"text\" placeholder=\"Input chat ID here\" value={joinID} onChange={handleChange}></input>\n            <button className=\"create-btn\" onClick={join}>Join</button>\n            </div>\n        </div>\n    );\n}\n\nexport default CreateRoom;","import React from \"react\";\nimport '../styles/Messages.css';\n\n\nconst Messages = (props) => {\n    const { messages } = props;\n    \n    const renderMessage = (message, index) => {\n        if (message.yours) {\n            return (\n                <div className=\"my_message_container\" key={index}>\n                    <div className=\"my_message\">\n                        {message.value}\n                    </div>\n                    {/*<div id=\"usr-s\">Username</div>*/}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"received_message_container\" key={index}>\n                <div className=\"received_message\">\n                    {message.value}\n                </div>\n                <div id=\"usr-r\">Username</div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"messages_container\">\n            {messages.map(renderMessage)}\n        </div>\n    )\n}\n\nexport default Messages;","import React, { useRef, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Messages from '../components/Messages';\nimport '../styles/Room.css'\n\nconst Room = (props) => {\n    const peerRef = useRef();\n    const socketRef = useRef();\n    const otherUser = useRef();\n    const sendChannel = useRef();\n    const [text, setText] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() => {\n        socketRef.current = io.connect(\"https://signaling-server-nettprogg.herokuapp.com/\");\n        socketRef.current.emit(\"join room\", props.match.params.roomID);\n\n        socketRef.current.on('other user', userID => {\n            callUser(userID);\n            otherUser.current = userID;\n        });\n\n        socketRef.current.on(\"user joined\", userID => {\n            otherUser.current = userID;\n        });\n\n        socketRef.current.on(\"offer\", handleOffer);\n\n        socketRef.current.on(\"answer\", handleAnswer);\n\n        socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n\n    }, []);\n\n\n    function callUser(userID) {\n        peerRef.current = createPeer(userID);\n        sendChannel.current = peerRef.current.createDataChannel(\"sendChannel\");\n        sendChannel.current.onmessage = handleReceiveMessage;\n    }\n\n    function handleReceiveMessage(e) {\n        setMessages(messages => [...messages, {yours: false, value: e.data}]);\n    }\n\n    function createPeer(userID) {\n        const peer = new RTCPeerConnection({\n            iceServers: [\n                {\n                    urls: 'stun:nettverksprogg.eastus2.cloudapp.azure.com:3478'\n                }\n            ]\n        });\n\n        peer.onicecandidate = handleICECandidateEvent;\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n        return peer;\n    }\n\n    function handleNegotiationNeededEvent(userID) {\n        peerRef.current.createOffer().then(offer => {\n            return peerRef.current.setLocalDescription(offer);\n        }).then(() => {\n            const payload = {\n                target: userID,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            };\n            socketRef.current.emit(\"offer\", payload);\n        }).catch(e => console.log(e));\n    }\n\n    function handleOffer(incoming) {\n        peerRef.current = createPeer();\n        peerRef.current.ondatachannel = event => {\n            sendChannel.current = event.channel;\n            sendChannel.current.onmessage = handleReceiveMessage;\n        }\n        const desc = new RTCSessionDescription(incoming.sdp);\n        \n        peerRef.current.setRemoteDescription(desc).then(() => {\n        }).then(() => {\n            return peerRef.current.createAnswer();\n        }).then(answer => {\n            return peerRef.current.setLocalDescription(answer);\n        }).then(() => {\n            const payload = {\n                target: incoming.caller,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            }\n            socketRef.current.emit(\"answer\", payload);\n        })\n    }\n\n    function handleAnswer(message) {\n        const desc = new RTCSessionDescription(message.sdp);\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n    }\n\n    function handleICECandidateEvent(e) {\n        if (e.candidate) {\n            const payload = {\n                target: otherUser.current,\n                candidate: e.candidate,\n            }\n            socketRef.current.emit(\"ice-candidate\", payload);\n        }\n    }\n\n    function handleNewICECandidateMsg(incoming) {\n        const candidate = new RTCIceCandidate(incoming);\n\n        peerRef.current.addIceCandidate(candidate)\n            .catch(e => console.log(e));\n    }\n\n    function sendMessage() {\n        sendChannel.current.send(text);\n        setMessages(messages => [...messages, {yours: true, value: text}]);\n        setText(\"\");\n    }\n\n    function handleChange(e) {\n        setText(e.target.value);\n    }\n\n    const handleKeyDown = (event) => { // TODO: Add ability for Shift+Enter to go to next line\n        if (event.key === 'Enter') {\n            sendMessage();\n        }\n    }\n\n\n    return (\n        <div className=\"container\">\n            <h1>Chat room: {props.match.params.roomID}</h1>\n            <div className=\"username\">\n                <input id=\"name\" type=\"text\" placeholder=\"Username\"></input>\n                <button id=\"name-btn\">Submit</button>\n            </div>\n            <Messages messages={messages} />\n            <div className=\"send-msg\">\n                <textarea className=\"msg-box\" value={text} onChange={handleChange} onKeyDown={handleKeyDown} placeholder=\"Write your message here...\" />\n                <button className=\"btn\" onClick={sendMessage}>Send</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Room;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./components/CreateRoom\";\nimport Room from \"./components/Room\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/\" exact component={CreateRoom} />\n          <Route path=\"/room/:roomID\" component={Room} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}