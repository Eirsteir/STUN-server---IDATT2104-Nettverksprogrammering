{"version":3,"sources":["components/CreateRoom.js","components/Messages.js","components/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","className","onClick","id","uuid","history","push","Messages","messages","map","message","index","yours","value","Room","peerRef","useRef","socketRef","otherUser","sendChannel","useState","text","setText","setMessages","handleReceiveMessage","e","data","createPeer","userID","peer","RTCPeerConnection","iceServers","urls","onicecandidate","handleICECandidateEvent","onnegotiationneeded","current","createOffer","then","offer","setLocalDescription","payload","target","caller","sdp","localDescription","emit","catch","console","log","handleNegotiationNeededEvent","handleOffer","incoming","ondatachannel","event","channel","onmessage","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","handleAnswer","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","sendMessage","send","useEffect","io","connect","match","params","roomID","on","createDataChannel","callUser","type","placeholder","onChange","onKeyDown","key","App","basename","process","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.43db4bc2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { v1 as uuid } from \"uuid\";\r\nimport '../styles/CreateRoom.css';\r\n\r\nconst CreateRoom = (props) => {\r\n    function create() {\r\n        const id = uuid();\r\n        props.history.push(`/room/${id}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"btn-page\">\r\n            <div className=\"btn-container\">\r\n            <button className=\"create-btn\" onClick={create}>Create Room</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateRoom;","import React from \"react\";\r\nimport '../styles/Messages.css';\r\n\r\n\r\nconst Messages = (props) => {\r\n    const { messages } = props;\r\n    \r\n    const renderMessage = (message, index) => {\r\n        if (message.yours) {\r\n            return (\r\n                <div className=\"my_message_container\" key={index}>\r\n                    <div className=\"my_message\">\r\n                        {message.value}\r\n                    </div>\r\n                    {/*<div id=\"usr-s\">Username</div>*/}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"received_message_container\" key={index}>\r\n                <div className=\"received_message\">\r\n                    {message.value}\r\n                </div>\r\n                <div id=\"usr-r\">Username</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"messages_container\">\r\n            {messages.map(renderMessage)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages;","import React, { useRef, useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Messages from '../components/Messages';\r\nimport '../styles/Room.css'\r\n\r\nconst Room = (props) => {\r\n    const peerRef = useRef();\r\n    const socketRef = useRef();\r\n    const otherUser = useRef();\r\n    const sendChannel = useRef();\r\n    const [text, setText] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io.connect(\"https://signaling-server-nettprogg.herokuapp.com/\");\r\n        socketRef.current.emit(\"join room\", props.match.params.roomID);\r\n\r\n        socketRef.current.on('other user', userID => {\r\n            callUser(userID);\r\n            otherUser.current = userID;\r\n        });\r\n\r\n        socketRef.current.on(\"user joined\", userID => {\r\n            otherUser.current = userID;\r\n        });\r\n\r\n        socketRef.current.on(\"offer\", handleOffer);\r\n\r\n        socketRef.current.on(\"answer\", handleAnswer);\r\n\r\n        socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\r\n\r\n    }, []);\r\n\r\n\r\n    function callUser(userID) {\r\n        peerRef.current = createPeer(userID);\r\n        sendChannel.current = peerRef.current.createDataChannel(\"sendChannel\");\r\n        sendChannel.current.onmessage = handleReceiveMessage;\r\n    }\r\n\r\n    function handleReceiveMessage(e) {\r\n        setMessages(messages => [...messages, {yours: false, value: e.data}]);\r\n    }\r\n\r\n    function createPeer(userID) {\r\n        const peer = new RTCPeerConnection({\r\n            iceServers: [\r\n                {\r\n                    urls: 'stun:nettverksprogg.eastus2.cloudapp.azure.com:3478'\r\n                }\r\n            ]\r\n        });\r\n\r\n        peer.onicecandidate = handleICECandidateEvent;\r\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n\r\n        return peer;\r\n    }\r\n\r\n    function handleNegotiationNeededEvent(userID) {\r\n        peerRef.current.createOffer().then(offer => {\r\n            return peerRef.current.setLocalDescription(offer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: userID,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            };\r\n            socketRef.current.emit(\"offer\", payload);\r\n        }).catch(e => console.log(e));\r\n    }\r\n\r\n    function handleOffer(incoming) {\r\n        peerRef.current = createPeer();\r\n        peerRef.current.ondatachannel = event => {\r\n            sendChannel.current = event.channel;\r\n            sendChannel.current.onmessage = handleReceiveMessage;\r\n        }\r\n        const desc = new RTCSessionDescription(incoming.sdp);\r\n        \r\n        peerRef.current.setRemoteDescription(desc).then(() => {\r\n        }).then(() => {\r\n            return peerRef.current.createAnswer();\r\n        }).then(answer => {\r\n            return peerRef.current.setLocalDescription(answer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: incoming.caller,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            }\r\n            socketRef.current.emit(\"answer\", payload);\r\n        })\r\n    }\r\n\r\n    function handleAnswer(message) {\r\n        const desc = new RTCSessionDescription(message.sdp);\r\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\r\n    }\r\n\r\n    function handleICECandidateEvent(e) {\r\n        if (e.candidate) {\r\n            const payload = {\r\n                target: otherUser.current,\r\n                candidate: e.candidate,\r\n            }\r\n            socketRef.current.emit(\"ice-candidate\", payload);\r\n        }\r\n    }\r\n\r\n    function handleNewICECandidateMsg(incoming) {\r\n        const candidate = new RTCIceCandidate(incoming);\r\n\r\n        peerRef.current.addIceCandidate(candidate)\r\n            .catch(e => console.log(e));\r\n    }\r\n\r\n    function sendMessage() {\r\n        sendChannel.current.send(text);\r\n        setMessages(messages => [...messages, {yours: true, value: text}]);\r\n        setText(\"\");\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const handleKeyDown = (event) => { // TODO: Add ability for Shift+Enter to go to next line\r\n        if (event.key === 'Enter') {\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Chat room: {props.match.params.roomID}</h1>\r\n            <div className=\"username\">\r\n                <input id=\"name\" type=\"text\" placeholder=\"Username\"></input>\r\n                <button id=\"name-btn\">Submit</button>\r\n            </div>\r\n            <Messages messages={messages} />\r\n            <div className=\"send-msg\">\r\n                <textarea className=\"msg-box\" value={text} onChange={handleChange} onKeyDown={handleKeyDown} placeholder=\"Write your message here...\" />\r\n                <button className=\"btn\" onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport CreateRoom from \"./components/CreateRoom\";\r\nimport Room from \"./components/Room\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={CreateRoom} />\r\n          <Route path=\"/room/:roomID\" component={Room} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}